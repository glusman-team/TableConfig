from __future__ import annotations  # ! KEEP AT TOP OF ALL SCRIPTS
from pydantic import NonNegativeInt
from pydantic import PositiveInt
from pydantic import BaseModel
from pydantic import HttpUrl
from typing import Optional
from pydantic import Field
from typing import Literal
from pydantic import Union
from pathlib import Path
from typing import Any
from enum import Enum

class Healthz(BaseModel):
  ok: bool = Field(...)

class TableConfig(BaseModel):
  model_config: dict[str, Any] = dict(
    str_strip_whitespace=True,
    validate_assignment=True,
    use_enum_values=True,
    extra="forbid",
    populate_by_name=True,
    json_schema_extra={
      "title": "Tablassert TableConfig Section"
    },
  )

class _ComparisonOps(str, Enum):
  GT = "GT"
  GE = "GE"
  LT = "LT"
  LE = "LE"
  EQ = "EQ"
  NE = "NE"

class _ReindexRules(TableConfig):
  column: str = Field(
    ...,
    description="the name of a column to reindex flowing the excel-style A-ZZ naming convention",
    json_schema_extra={"naming convention": "A-ZZ"},
    examples=["A", "D", "AF"]
  )
  op: _ComparisonOps = Field(
    _ComparisonOps.NE,
    description="the type of operation to reindex the data by",
    examples=["GT", "NE", "LE"]
  )
  comaprator: Union[str, int, float] = Field(
    ...,
    description="the value compared against",
    examples=[3, "FALSE", 0.05]
  )

class _FileTypes(str, Enum):
  EXCEL = "EXCEL"
  TEXT = "TEXT"

class _BaseSource(TableConfig):
  local: Path = Field(
    default="DATALAKE/",
    description="path to where you want to store/already store the file at the url",
    examples=["/home/STORE"]
  )
  url: HttpUrl = Field(
    ...,
    description="url stating where to download the file we're working with",
    examples=[
      "https://pmc.ncbi.nlm.nih.gov/articles/instance/9431300/bin/spectrum.00013-22-s0005.xlsx",
      "https://pmc.ncbi.nlm.nih.gov/articles/instance/7562722/bin/41467_2020_18871_MOESM4_ESM.xlsx",
      "https://www.cell.com/cms/10.1016/j.cell.2024.10.045/attachment/765b3106-d659-4412-a27b-b7e76d7895e9/mmc7.xlsx"
    ]
  )
  rows: Optional[list[NonNegativeInt]] = Field(
    default=None,
    description="a list of rows from the file to extract statements from",
    json_schema_extra={"indexing": "one based"},
    examples=[
      [1, 4, 7, 18],
      [18, 2, 4, 70, 96],
      [934, 21]
    ]
  )
  row_slice: Optional[list[Union[NonNegativeInt, Literal["[AUTO]"]]]] = Field(
    default=None,
    max_length=2,
    description="a slice describing rows from the file to extract statements from",
    json_schema_extra={
      "indexing": "one based",
      "auto description": {
        "auto comes before number": "auto finds the first row of the file",
        "auto comes after number": "auto finds the last row of the file"
      }
    },
    examples=[
      [0, 200],
      ["[AUTO]", 63],
      [6, "[AUTO]"]
    ]
  )
  reindex: Optional[list[_ReindexRules]] = Field(
    default=None,
    description="a series of reindexing operations that only extract statements from rows based on a condition"
  )

class _ExcelSource(_BaseSource):
  kind: Literal[_FileTypes.EXCEL] = Field(
    default=_FileTypes.EXCEL,
    description="the kind of tabular file we extract statements from",
    json_schema_extra={
      "included extensions": ["xlsx", "xls"],
    },
    examples=["EXCEL"]
  )
  sheet: Optional[str] = Field(default="Sheet1")

class _TextSource(_BaseSource):
  kind: Literal[_FileTypes.TEXT] = Field(
    default=_FileTypes.TEXT,
    json_schema_extra={
      "included extensions": ["csv", "tsv"],
    },
    examples=["TEXT"]
  )
  delimiter: Optional[str] = Field(default=",")

class _RegexRules(TableConfig):
  pattern: str = Field(
    ...,
    description="regular expression for re.sub",
    examples=[r"\(.*$", r"^[^:]*:", r"_9"]
  )
  replacement: str = Field(
    default='""',
    description="replacement for re.sub",
    examples=[r'""', r" ", r"s"]
  )

class _EncodingMethods(str, Enum):
  VALUE = "VALUE"
  COLUMN_OF_VALUES = "COLUMN_OF_VALUES"

class _ValueEncoding(TableConfig):
  method: _EncodingMethods = Field(default=_EncodingMethods.VALUE)
  encoding: str = Field(...)
  fill: Optional[_FillMethods] = Field(
    default=None,
    description="a polars fill_null strategy to fill empty rows in a specified column",
    examples=["FORWARD", "BACKWARD", "MEAN"]
  )

class _FillMethods(str, Enum):
  FORWARD = "FORWARD"
  BACKWARD = "BACKWARD"
  MIN = "MIN"
  MAX = "MAX"
  MEAN = "MEAN"
  ZERO = "ZERO"
  ONE = "ONE"

class _BiolinkCategories(str, Enum):
  ACCESSIBLE_DNA_REGION = "ACCESSIBLE_DNA_REGION"
  ACTIVITY = "ACTIVITY"
  ADMINISTRATIVE_ENTITY = "ADMINISTRATIVE_ENTITY"
  AGENT = "AGENT"
  ANATOMICAL_ENTITY = "ANATOMICAL_ENTITY"
  ANNOTATION = "ANNOTATION"
  ARTICLE = "ARTICLE"
  ATTRIBUTE = "ATTRIBUTE"
  BACTERIUM = "BACTERIUM"
  BEHAVIOR = "BEHAVIOR"
  BEHAVIORAL_EXPOSURE = "BEHAVIORAL_EXPOSURE"
  BEHAVIORAL_FEATURE = "BEHAVIORAL_FEATURE"
  BEHAVIORAL_OUTCOME = "BEHAVIORAL_OUTCOME"
  BIOLOGICAL_ENTITY = "BIOLOGICAL_ENTITY"
  BIOLOGICAL_PROCESS = "BIOLOGICAL_PROCESS"
  BIOLOGICAL_PROCESS_OR_ACTIVITY = "BIOLOGICAL_PROCESS_OR_ACTIVITY"
  BIOLOGICAL_SEX = "BIOLOGICAL_SEX"
  BIOTIC_EXPOSURE = "BIOTIC_EXPOSURE"
  BOOK = "BOOK"
  BOOK_CHAPTER = "BOOK_CHAPTER"
  CASE = "CASE"
  CELL = "CELL"
  CELL_LINE = "CELL_LINE"
  CELLULAR_COMPONENT = "CELLULAR_COMPONENT"
  CELLULAR_ORGANISM = "CELLULAR_ORGANISM"
  CHEMICAL_ENTITY = "CHEMICAL_ENTITY"
  CHEMICAL_EXPOSURE = "CHEMICAL_EXPOSURE"
  CHEMICAL_MIXTURE = "CHEMICAL_MIXTURE"
  CHEMICAL_ROLE = "CHEMICAL_ROLE"
  CHI_SQUARED_ANALYSIS_RESULT = "CHI_SQUARED_ANALYSIS_RESULT"
  CLINICAL_ATTRIBUTE = "CLINICAL_ATTRIBUTE"
  CLINICAL_COURSE = "CLINICAL_COURSE"
  CLINICAL_ENTITY = "CLINICAL_ENTITY"
  CLINICAL_FINDING = "CLINICAL_FINDING"
  CLINICAL_INTERVENTION = "CLINICAL_INTERVENTION"
  CLINICAL_MEASUREMENT = "CLINICAL_MEASUREMENT"
  CLINICAL_MODIFIER = "CLINICAL_MODIFIER"
  CLINICAL_TRIAL = "CLINICAL_TRIAL"
  CODING_SEQUENCE = "CODING_SEQUENCE"
  COHORT = "COHORT"
  COMMON_DATA_ELEMENT = "COMMON_DATA_ELEMENT"
  COMPLEX_CHEMICAL_EXPOSURE = "COMPLEX_CHEMICAL_EXPOSURE"
  COMPLEX_MOLECULAR_MIXTURE = "COMPLEX_MOLECULAR_MIXTURE"
  CONCEPT_COUNT_ANALYSIS_RESULT = "CONCEPT_COUNT_ANALYSIS_RESULT"
  CONFIDENCE_LEVEL = "CONFIDENCE_LEVEL"
  DATASET = "DATASET"
  DATASET_DISTRIBUTION = "DATASET_DISTRIBUTION"
  DATASET_SUMMARY = "DATASET_SUMMARY"
  DATASET_VERSION = "DATASET_VERSION"
  DEVICE = "DEVICE"
  DIAGNOSTIC_AID = "DIAGNOSTIC_AID"
  DISEASE = "DISEASE"
  DISEASE_OR_PHENOTYPIC_FEATURE = "DISEASE_OR_PHENOTYPIC_FEATURE"
  DISEASE_OR_PHENOTYPIC_FEATURE_EXPOSURE = "DISEASE_OR_PHENOTYPIC_FEATURE_EXPOSURE"
  DISEASE_OR_PHENOTYPIC_FEATURE_OUTCOME = "DISEASE_OR_PHENOTYPIC_FEATURE_OUTCOME"
  DRUG = "DRUG"
  DRUG_EXPOSURE = "DRUG_EXPOSURE"
  DRUG_LABEL = "DRUG_LABEL"
  DRUG_TO_GENE_INTERACTION_EXPOSURE = "DRUG_TO_GENE_INTERACTION_EXPOSURE"
  ENTITY = "ENTITY"
  ENVIRONMENTAL_EXPOSURE = "ENVIRONMENTAL_EXPOSURE"
  ENVIRONMENTAL_FEATURE = "ENVIRONMENTAL_FEATURE"
  ENVIRONMENTAL_FOOD_CONTAMINANT = "ENVIRONMENTAL_FOOD_CONTAMINANT"
  ENVIRONMENTAL_PROCESS = "ENVIRONMENTAL_PROCESS"
  EPIDEMIOLOGICAL_OUTCOME = "EPIDEMIOLOGICAL_OUTCOME"
  EVENT = "EVENT"
  EVIDENCE_TYPE = "EVIDENCE_TYPE"
  EXON = "EXON"
  FOOD = "FOOD"
  FOOD_ADDITIVE = "FOOD_ADDITIVE"
  FUNGUS = "FUNGUS"
  GENE = "GENE"
  GENE_FAMILY = "GENE_FAMILY"
  GENETIC_INHERITANCE = "GENETIC_INHERITANCE"
  GENOME = "GENOME"
  GENOMIC_BACKGROUND_EXPOSURE = "GENOMIC_BACKGROUND_EXPOSURE"
  GENOTYPE = "GENOTYPE"
  GENOTYPIC_SEX = "GENOTYPIC_SEX"
  GEOGRAPHIC_EXPOSURE = "GEOGRAPHIC_EXPOSURE"
  GEOGRAPHIC_LOCATION = "GEOGRAPHIC_LOCATION"
  GEOGRAPHIC_LOCATION_AT_TIME = "GEOGRAPHIC_LOCATION_AT_TIME"
  GROSS_ANATOMICAL_STRUCTURE = "GROSS_ANATOMICAL_STRUCTURE"
  HAPLOTYPE = "HAPLOTYPE"
  HOSPITALIZATION = "HOSPITALIZATION"
  HOSPITALIZATION_OUTCOME = "HOSPITALIZATION_OUTCOME"
  HUMAN = "HUMAN"
  INDIVIDUAL_ORGANISM = "INDIVIDUAL_ORGANISM"
  INFORMATION_CONTENT_ENTITY = "INFORMATION_CONTENT_ENTITY"
  INVERTEBRATE = "INVERTEBRATE"
  JOURNAL_ARTICLE = "JOURNAL_ARTICLE"
  LIFE_STAGE = "LIFE_STAGE"
  LOG_ODDS_ANALYSIS_RESULT = "LOG_ODDS_ANALYSIS_RESULT"
  MACROMOLECULAR_COMPLEX = "MACROMOLECULAR_COMPLEX"
  MAMMAL = "MAMMAL"
  MAPPING_COLLECTION = "MAPPING_COLLECTION"
  MATERIAL_SAMPLE = "MATERIAL_SAMPLE"
  MICRORNA = "MICRORNA"
  MOLECULAR_ACTIVITY = "MOLECULAR_ACTIVITY"
  MOLECULAR_ENTITY = "MOLECULAR_ENTITY"
  MOLECULAR_MIXTURE = "MOLECULAR_MIXTURE"
  MORTALITY_OUTCOME = "MORTALITY_OUTCOME"
  NAMED_THING = "NAMED_THING"
  NONCODING_RNA_PRODUCT = "NONCODING_RNA_PRODUCT"
  NUCLEIC_ACID_ENTITY = "NUCLEIC_ACID_ENTITY"
  NUCLEIC_ACID_SEQUENCE_MOTIF = "NUCLEIC_ACID_SEQUENCE_MOTIF"
  NUCLEOSOME_MODIFICATION = "NUCLEOSOME_MODIFICATION"
  OBSERVED_EXPECTED_FREQUENCY_ANALYSIS_RESULT = "OBSERVED_EXPECTED_FREQUENCY_ANALYSIS_RESULT"
  ONSET = "ONSET"
  ORGANISM_ATTRIBUTE = "ORGANISM_ATTRIBUTE"
  ORGANISM_TAXON = "ORGANISM_TAXON"
  ORGANISMAL_ENTITY = "ORGANISMAL_ENTITY"
  PATENT = "PATENT"
  PATHOLOGICAL_ANATOMICAL_EXPOSURE = "PATHOLOGICAL_ANATOMICAL_EXPOSURE"
  PATHOLOGICAL_ANATOMICAL_OUTCOME = "PATHOLOGICAL_ANATOMICAL_OUTCOME"
  PATHOLOGICAL_ANATOMICAL_STRUCTURE = "PATHOLOGICAL_ANATOMICAL_STRUCTURE"
  PATHOLOGICAL_PROCESS = "PATHOLOGICAL_PROCESS"
  PATHOLOGICAL_PROCESS_EXPOSURE = "PATHOLOGICAL_PROCESS_EXPOSURE"
  PATHOLOGICAL_PROCESS_OUTCOME = "PATHOLOGICAL_PROCESS_OUTCOME"
  PATHWAY = "PATHWAY"
  PHENOMENON = "PHENOMENON"
  PHENOTYPIC_FEATURE = "PHENOTYPIC_FEATURE"
  PHENOTYPIC_QUALITY = "PHENOTYPIC_QUALITY"
  PHENOTYPIC_SEX = "PHENOTYPIC_SEX"
  PHYSICAL_ENTITY = "PHYSICAL_ENTITY"
  PHYSIOLOGICAL_PROCESS = "PHYSIOLOGICAL_PROCESS"
  PLANETARY_ENTITY = "PLANETARY_ENTITY"
  PLANT = "PLANT"
  POLYPEPTIDE = "POLYPEPTIDE"
  POPULATION_OF_INDIVIDUAL_ORGANISMS = "POPULATION_OF_INDIVIDUAL_ORGANISMS"
  POSTTRANSLATIONAL_MODIFICATION = "POSTTRANSLATIONAL_MODIFICATION"
  PREDICATE_MAPPING = "PREDICATE_MAPPING"
  PREPRINT_PUBLICATION = "PREPRINT_PUBLICATION"
  PROCEDURE = "PROCEDURE"
  PROCESSED_MATERIAL = "PROCESSED_MATERIAL"
  PROTEIN = "PROTEIN"
  PROTEIN_DOMAIN = "PROTEIN_DOMAIN"
  PROTEIN_FAMILY = "PROTEIN_FAMILY"
  PROTEIN_ISOFORM = "PROTEIN_ISOFORM"
  PUBLICATION = "PUBLICATION"
  QUANTITY_VALUE = "QUANTITY_VALUE"
  REAGENT_TARGETED_GENE = "REAGENT_TARGETED_GENE"
  REGULATORY_REGION = "REGULATORY_REGION"
  RELATIONSHIP_TYPE = "RELATIONSHIP_TYPE"
  RELATIVE_FREQUENCY_ANALYSIS_RESULT = "RELATIVE_FREQUENCY_ANALYSIS_RESULT"
  RETRIEVAL_SOURCE = "RETRIEVAL_SOURCE"
  RNA_PRODUCT = "RNA_PRODUCT"
  RNA_PRODUCT_ISOFORM = "RNA_PRODUCT_ISOFORM"
  SEQUENCE_VARIANT = "SEQUENCE_VARIANT"
  SERIAL = "SERIAL"
  SEVERITY_VALUE = "SEVERITY_VALUE"
  SIRNA = "SIRNA"
  SMALL_MOLECULE = "SMALL_MOLECULE"
  SNV = "SNV"
  SOCIOECONOMIC_ATTRIBUTE = "SOCIOECONOMIC_ATTRIBUTE"
  SOCIOECONOMIC_EXPOSURE = "SOCIOECONOMIC_EXPOSURE"
  SOCIOECONOMIC_OUTCOME = "SOCIOECONOMIC_OUTCOME"
  STUDY = "STUDY"
  STUDY_POPULATION = "STUDY_POPULATION"
  STUDY_RESULT = "STUDY_RESULT"
  STUDY_VARIABLE = "STUDY_VARIABLE"
  TAXONOMIC_RANK = "TAXONOMIC_RANK"
  TEXT_MINING_RESULT = "TEXT_MINING_RESULT"
  TRANSCRIPT = "TRANSCRIPT"
  TRANSCRIPTION_FACTOR_BINDING_SITE = "TRANSCRIPTION_FACTOR_BINDING_SITE"
  TREATMENT = "TREATMENT"
  VERTEBRATE = "VERTEBRATE"
  VIRUS = "VIRUS"
  WEB_PAGE = "WEB_PAGE"
  ZYGOSITY = "ZYGOSITY"

class _NodeSpec(_ValueEncoding):
  taxon: Optional[PositiveInt] = Field(
    default=None,
    description="a ncbi taxon id to only search for genes in a taxon",
    json_schema_extra={
      "human": 9606,
      "mouse": 10090
    },
    examples=[9606, 10090, 69293]
  )
  prioritize: Optional[frozenset[_BiolinkCategories]] = Field(
    default=None,
    description="a set of biolink categories to prioritize mapping values to",
    examples=[
      ["GENE", "PATHWAY"],
      ["PROTEIN"],
      ["ORGANISM_TAXON", "DISEASE", "PHENOTYPIC_FEATURE"]
    ]
  )
  avoid: Optional[frozenset[_BiolinkCategories]] = Field(
    default=None,
    description="a set of biolink categories to avoid mapping values to",
    examples=[
      ["GENE", "DISEASE"],
      ["PUBLICATION"],
      ["ORGANISM_TAXON", "PATHWAY", "PHENOTYPIC_FEATURE"]
    ]
  )
  prefix: Optional[str] = Field(
    default=None,
    description="a prefix to add to the begining of all values before mapping",
    examples=["ENSEMBL:", "Clostridia ", "UMLS:"]
  )
  suffix: Optional[str] = Field(
    default=None,
    description="a suffix to add to the end of all values before mapping",
    examples=[" sp.", "Syndrome", "Disease"]
  )
  remove: Optional[list[str]] = Field(
    default=None,
    description="a list of substrings to remove from values in a column",
    json_schema_extra={"equivalent to": "re.sub(substring, "", values)"},
    examples=["_", " ", "."]
  )
  regex: Optional[list[_RegexRules]] = Field(
    default=None,
    description="a list of regular expressions to apply to values in a column"
  )
  explode_by: Optional[str] = Field(
    default=None,
    description="a delimiter to split values in a column into a list of values before exploding those values with polars explode",
    examples=[",", "|", " "]
  )

class _BiolinkPredicates(str, Enum):
  ACTIVE_IN = "ACTIVE_IN"
  ACTIVELY_INVOLVED_IN = "ACTIVELY_INVOLVED_IN"
  ACTIVELY_INVOLVES = "ACTIVELY_INVOLVES"
  ACTS_UPSTREAM_OF = "ACTS_UPSTREAM_OF"
  ACTS_UPSTREAM_OF_NEGATIVE_EFFECT = "ACTS_UPSTREAM_OF_NEGATIVE_EFFECT"
  ACTS_UPSTREAM_OF_OR_WITHIN = "ACTS_UPSTREAM_OF_OR_WITHIN"
  ACTS_UPSTREAM_OF_OR_WITHIN_NEGATIVE_EFFECT = "ACTS_UPSTREAM_OF_OR_WITHIN_NEGATIVE_EFFECT"
  ACTS_UPSTREAM_OF_OR_WITHIN_POSITIVE_EFFECT = "ACTS_UPSTREAM_OF_OR_WITHIN_POSITIVE_EFFECT"
  ACTS_UPSTREAM_OF_POSITIVE_EFFECT = "ACTS_UPSTREAM_OF_POSITIVE_EFFECT"
  ADVERSE_EVENT_OF = "ADVERSE_EVENT_OF"
  AFFECTED_BY = "AFFECTED_BY"
  AFFECTS = "AFFECTS"
  AFFECTS_LIKELIHOOD_OF = "AFFECTS_LIKELIHOOD_OF"
  AFFECTS_RESPONSE_TO = "AFFECTS_RESPONSE_TO"
  AMELIORATES_CONDITION = "AMELIORATES_CONDITION"
  AMOUNT_OR_ACTIVITY_DECREASED_BY = "AMOUNT_OR_ACTIVITY_DECREASED_BY"
  AMOUNT_OR_ACTIVITY_INCREASED_BY = "AMOUNT_OR_ACTIVITY_INCREASED_BY"
  APPLIED_TO_TREAT = "APPLIED_TO_TREAT"
  ASSESSES = "ASSESSES"
  ASSOCIATED_WITH = "ASSOCIATED_WITH"
  ASSOCIATED_WITH_DECREASED_LIKELIHOOD_OF = "ASSOCIATED_WITH_DECREASED_LIKELIHOOD_OF"
  ASSOCIATED_WITH_INCREASED_LIKELIHOOD_OF = "ASSOCIATED_WITH_INCREASED_LIKELIHOOD_OF"
  ASSOCIATED_WITH_LIKELIHOOD_OF = "ASSOCIATED_WITH_LIKELIHOOD_OF"
  ASSOCIATED_WITH_RESISTANCE_TO = "ASSOCIATED_WITH_RESISTANCE_TO"
  ASSOCIATED_WITH_SENSITIVITY_TO = "ASSOCIATED_WITH_SENSITIVITY_TO"
  AUTHOR = "AUTHOR"
  BENEFICIAL_IN_MODELS_FOR = "BENEFICIAL_IN_MODELS_FOR"
  BINDS = "BINDS"
  BIOMARKER_FOR = "BIOMARKER_FOR"
  BROAD_MATCH = "BROAD_MATCH"
  CAN_BE_CARRIED_OUT_BY = "CAN_BE_CARRIED_OUT_BY"
  CAPABLE_OF = "CAPABLE_OF"
  CATALYZES = "CATALYZES"
  CAUSED_BY = "CAUSED_BY"
  CAUSES = "CAUSES"
  CHEMICALLY_SIMILAR_TO = "CHEMICALLY_SIMILAR_TO"
  CLOSE_MATCH = "CLOSE_MATCH"
  COEXISTS_WITH = "COEXISTS_WITH"
  COEXPRESSED_WITH = "COEXPRESSED_WITH"
  COLOCALIZES_WITH = "COLOCALIZES_WITH"
  COMPLETED_BY = "COMPLETED_BY"
  COMPOSED_PRIMARILY_OF = "COMPOSED_PRIMARILY_OF"
  CONDITION_AMELIORATED_BY = "CONDITION_AMELIORATED_BY"
  CONDITION_ASSOCIATED_WITH_GENE = "CONDITION_ASSOCIATED_WITH_GENE"
  CONDITION_EXACERBATED_BY = "CONDITION_EXACERBATED_BY"
  CONDITION_PREDISPOSED_BY = "CONDITION_PREDISPOSED_BY"
  CONDITION_PREVENTED_BY = "CONDITION_PREVENTED_BY"
  CONDITION_PROMOTED_BY = "CONDITION_PROMOTED_BY"
  CONSUMED_BY = "CONSUMED_BY"
  CONSUMES = "CONSUMES"
  CONTAINS_PROCESS = "CONTAINS_PROCESS"
  CONTRAINDICATED_IN = "CONTRAINDICATED_IN"
  CONTRIBUTES_TO = "CONTRIBUTES_TO"
  CONTRIBUTION_FROM = "CONTRIBUTION_FROM"
  CONTRIBUTOR = "CONTRIBUTOR"
  CORRELATED_WITH = "CORRELATED_WITH"
  DECREASED_AMOUNT_IN = "DECREASED_AMOUNT_IN"
  DECREASED_LIKELIHOOD_ASSOCIATED_WITH = "DECREASED_LIKELIHOOD_ASSOCIATED_WITH"
  DECREASES_AMOUNT_OR_ACTIVITY_OF = "DECREASES_AMOUNT_OR_ACTIVITY_OF"
  DECREASES_RESPONSE_TO = "DECREASES_RESPONSE_TO"
  DERIVES_FROM = "DERIVES_FROM"
  DERIVES_INTO = "DERIVES_INTO"
  DEVELOPS_FROM = "DEVELOPS_FROM"
  DEVELOPS_INTO = "DEVELOPS_INTO"
  DIAGNOSES = "DIAGNOSES"
  DIRECTLY_PHYSICALLY_INTERACTS_WITH = "DIRECTLY_PHYSICALLY_INTERACTS_WITH"
  DISEASE_HAS_BASIS_IN = "DISEASE_HAS_BASIS_IN"
  DISEASE_HAS_LOCATION = "DISEASE_HAS_LOCATION"
  DISRUPTED_BY = "DISRUPTED_BY"
  DISRUPTS = "DISRUPTS"
  EDITOR = "EDITOR"
  ENABLED_BY = "ENABLED_BY"
  ENABLES = "ENABLES"
  EXACERBATES_CONDITION = "EXACERBATES_CONDITION"
  EXACT_MATCH = "EXACT_MATCH"
  EXPRESSED_IN = "EXPRESSED_IN"
  EXPRESSES = "EXPRESSES"
  FOOD_COMPONENT_OF = "FOOD_COMPONENT_OF"
  GENE_ASSOCIATED_WITH_CONDITION = "GENE_ASSOCIATED_WITH_CONDITION"
  GENE_PRODUCT_OF = "GENE_PRODUCT_OF"
  GENE_FUSION_WITH = "GENE_FUSION_WITH"
  GENETIC_ASSOCIATION = "GENETIC_ASSOCIATION"
  GENETIC_NEIGHBORHOOD_OF = "GENETIC_NEIGHBORHOOD_OF"
  GENETICALLY_ASSOCIATED_WITH = "GENETICALLY_ASSOCIATED_WITH"
  GENETICALLY_INTERACTS_WITH = "GENETICALLY_INTERACTS_WITH"
  HAS_ACTIVE_COMPONENT = "HAS_ACTIVE_COMPONENT"
  HAS_ACTIVE_INGREDIENT = "HAS_ACTIVE_INGREDIENT"
  HAS_ADVERSE_EVENT = "HAS_ADVERSE_EVENT"
  HAS_AUTHOR = "HAS_AUTHOR"
  HAS_BIOMARKER = "HAS_BIOMARKER"
  HAS_CATALYST = "HAS_CATALYST"
  HAS_CHEMICAL_ROLE = "HAS_CHEMICAL_ROLE"
  HAS_COMPLETED = "HAS_COMPLETED"
  HAS_CONTRAINDICATION = "HAS_CONTRAINDICATION"
  HAS_CONTRIBUTOR = "HAS_CONTRIBUTOR"
  HAS_DECREASED_AMOUNT = "HAS_DECREASED_AMOUNT"
  HAS_EDITOR = "HAS_EDITOR"
  HAS_EXCIPIENT = "HAS_EXCIPIENT"
  HAS_FOOD_COMPONENT = "HAS_FOOD_COMPONENT"
  HAS_FRAMESHIFT_VARIANT = "HAS_FRAMESHIFT_VARIANT"
  HAS_GENE_PRODUCT = "HAS_GENE_PRODUCT"
  HAS_INCREASED_AMOUNT = "HAS_INCREASED_AMOUNT"
  HAS_INPUT = "HAS_INPUT"
  HAS_MANIFESTATION = "HAS_MANIFESTATION"
  HAS_MEMBER = "HAS_MEMBER"
  HAS_METABOLITE = "HAS_METABOLITE"
  HAS_MISSENSE_VARIANT = "HAS_MISSENSE_VARIANT"
  HAS_MODE_OF_INHERITANCE = "HAS_MODE_OF_INHERITANCE"
  HAS_MOLECULAR_CONSEQUENCE = "HAS_MOLECULAR_CONSEQUENCE"
  HAS_NEARBY_VARIANT = "HAS_NEARBY_VARIANT"
  HAS_NEGATIVE_UPSTREAM_ACTOR = "HAS_NEGATIVE_UPSTREAM_ACTOR"
  HAS_NEGATIVE_UPSTREAM_OR_WITHIN_ACTOR = "HAS_NEGATIVE_UPSTREAM_OR_WITHIN_ACTOR"
  HAS_NON_CODING_VARIANT = "HAS_NON_CODING_VARIANT"
  HAS_NONSENSE_VARIANT = "HAS_NONSENSE_VARIANT"
  HAS_NOT_COMPLETED = "HAS_NOT_COMPLETED"
  HAS_NUTRIENT = "HAS_NUTRIENT"
  HAS_OUTPUT = "HAS_OUTPUT"
  HAS_PART = "HAS_PART"
  HAS_PARTICIPANT = "HAS_PARTICIPANT"
  HAS_PHENOTYPE = "HAS_PHENOTYPE"
  HAS_PLASMA_MEMBRANE_PART = "HAS_PLASMA_MEMBRANE_PART"
  HAS_POSITIVE_UPSTREAM_ACTOR = "HAS_POSITIVE_UPSTREAM_ACTOR"
  HAS_POSITIVE_UPSTREAM_OR_WITHIN_ACTOR = "HAS_POSITIVE_UPSTREAM_OR_WITHIN_ACTOR"
  HAS_PROVIDER = "HAS_PROVIDER"
  HAS_PUBLISHER = "HAS_PUBLISHER"
  HAS_SEQUENCE_LOCATION = "HAS_SEQUENCE_LOCATION"
  HAS_SEQUENCE_VARIANT = "HAS_SEQUENCE_VARIANT"
  HAS_SIDE_EFFECT = "HAS_SIDE_EFFECT"
  HAS_SPLICE_SITE_VARIANT = "HAS_SPLICE_SITE_VARIANT"
  HAS_SUBSTRATE = "HAS_SUBSTRATE"
  HAS_SYNONYMOUS_VARIANT = "HAS_SYNONYMOUS_VARIANT"
  HAS_TARGET = "HAS_TARGET"
  HAS_UPSTREAM_ACTOR = "HAS_UPSTREAM_ACTOR"
  HAS_UPSTREAM_OR_WITHIN_ACTOR = "HAS_UPSTREAM_OR_WITHIN_ACTOR"
  HAS_VARIANT_PART = "HAS_VARIANT_PART"
  HOMOLOGOUS_TO = "HOMOLOGOUS_TO"
  IN_CELL_POPULATION_WITH = "IN_CELL_POPULATION_WITH"
  IN_CLINICAL_TRIALS_FOR = "IN_CLINICAL_TRIALS_FOR"
  IN_COMPLEX_WITH = "IN_COMPLEX_WITH"
  IN_LINKAGE_DISEQUILIBRIUM_WITH = "IN_LINKAGE_DISEQUILIBRIUM_WITH"
  IN_PATHWAY_WITH = "IN_PATHWAY_WITH"
  IN_PRECLINICAL_TRIALS_FOR = "IN_PRECLINICAL_TRIALS_FOR"
  IN_TAXON = "IN_TAXON"
  INCREASED_AMOUNT_OF = "INCREASED_AMOUNT_OF"
  INCREASED_LIKELIHOOD_ASSOCIATED_WITH = "INCREASED_LIKELIHOOD_ASSOCIATED_WITH"
  INCREASES_AMOUNT_OR_ACTIVITY_OF = "INCREASES_AMOUNT_OR_ACTIVITY_OF"
  INCREASES_RESPONSE_TO = "INCREASES_RESPONSE_TO"
  INDIRECTLY_PHYSICALLY_INTERACTS_WITH = "INDIRECTLY_PHYSICALLY_INTERACTS_WITH"
  INTERACTS_WITH = "INTERACTS_WITH"
  IS_ACTIVE_INGREDIENT_OF = "IS_ACTIVE_INGREDIENT_OF"
  IS_ASSESSED_BY = "IS_ASSESSED_BY"
  IS_DIAGNOSED_BY = "IS_DIAGNOSED_BY"
  IS_EXCIPIENT_OF = "IS_EXCIPIENT_OF"
  IS_FRAMESHIFT_VARIANT_OF = "IS_FRAMESHIFT_VARIANT_OF"
  IS_INPUT_OF = "IS_INPUT_OF"
  IS_METABOLITE_OF = "IS_METABOLITE_OF"
  IS_MISSENSE_VARIANT_OF = "IS_MISSENSE_VARIANT_OF"
  IS_MOLECULAR_CONSEQUENCE_OF = "IS_MOLECULAR_CONSEQUENCE_OF"
  IS_NEARBY_VARIANT_OF = "IS_NEARBY_VARIANT_OF"
  IS_NON_CODING_VARIANT_OF = "IS_NON_CODING_VARIANT_OF"
  IS_NONSENSE_VARIANT_OF = "IS_NONSENSE_VARIANT_OF"
  IS_OUTPUT_OF = "IS_OUTPUT_OF"
  IS_SEQUENCE_VARIANT_OF = "IS_SEQUENCE_VARIANT_OF"
  IS_SIDE_EFFECT_OF = "IS_SIDE_EFFECT_OF"
  IS_SPLICE_SITE_VARIANT_OF = "IS_SPLICE_SITE_VARIANT_OF"
  IS_SUBSTRATE_OF = "IS_SUBSTRATE_OF"
  IS_SYNONYMOUS_VARIANT_OF = "IS_SYNONYMOUS_VARIANT_OF"
  LACKS_PART = "LACKS_PART"
  LIKELIHOOD_AFFECTED_BY = "LIKELIHOOD_AFFECTED_BY"
  LIKELIHOOD_ASSOCIATED_WITH = "LIKELIHOOD_ASSOCIATED_WITH"
  LOCATED_IN = "LOCATED_IN"
  LOCATION_OF = "LOCATION_OF"
  LOCATION_OF_DISEASE = "LOCATION_OF_DISEASE"
  MANIFESTATION_OF = "MANIFESTATION_OF"
  MEMBER_OF = "MEMBER_OF"
  MENTIONED_BY = "MENTIONED_BY"
  MENTIONS = "MENTIONS"
  MISSING_FROM = "MISSING_FROM"
  MODE_OF_INHERITANCE_OF = "MODE_OF_INHERITANCE_OF"
  MODEL_OF = "MODEL_OF"
  MODELS = "MODELS"
  MODELS_DEMONSTRATING_BENEFITS_FOR = "MODELS_DEMONSTRATING_BENEFITS_FOR"
  NARROW_MATCH = "NARROW_MATCH"
  NEGATIVELY_CORRELATED_WITH = "NEGATIVELY_CORRELATED_WITH"
  NOT_COMPLETED_BY = "NOT_COMPLETED_BY"
  NUTRIENT_OF = "NUTRIENT_OF"
  OCCURS_IN = "OCCURS_IN"
  OCCURS_IN_DISEASE = "OCCURS_IN_DISEASE"
  OCCURS_TOGETHER_IN_LITERATURE_WITH = "OCCURS_TOGETHER_IN_LITERATURE_WITH"
  OPPOSITE_OF = "OPPOSITE_OF"
  ORTHOLOGOUS_TO = "ORTHOLOGOUS_TO"
  OVERLAPS = "OVERLAPS"
  PARALOGOUS_TO = "PARALOGOUS_TO"
  PART_OF = "PART_OF"
  PARTICIPATES_IN = "PARTICIPATES_IN"
  PHENOTYPE_OF = "PHENOTYPE_OF"
  PHYSICALLY_INTERACTS_WITH = "PHYSICALLY_INTERACTS_WITH"
  PLASMA_MEMBRANE_PART_OF = "PLASMA_MEMBRANE_PART_OF"
  POSITIVELY_CORRELATED_WITH = "POSITIVELY_CORRELATED_WITH"
  PRECEDED_BY = "PRECEDED_BY"
  PRECEDES = "PRECEDES"
  PREDISPOSES_TO_CONDITION = "PREDISPOSES_TO_CONDITION"
  PREVENTATIVE_FOR_CONDITION = "PREVENTATIVE_FOR_CONDITION"
  PRIMARILY_COMPOSED_OF = "PRIMARILY_COMPOSED_OF"
  PRODUCED_BY = "PRODUCED_BY"
  PRODUCES = "PRODUCES"
  PROMOTES_CONDITION = "PROMOTES_CONDITION"
  PROVIDER = "PROVIDER"
  PUBLISHER = "PUBLISHER"
  REGULATED_BY = "REGULATED_BY"
  REGULATES = "REGULATES"
  RELATED_CONDITION = "RELATED_CONDITION"
  RELATED_TO = "RELATED_TO"
  RELATED_TO_AT_CONCEPT_LEVEL = "RELATED_TO_AT_CONCEPT_LEVEL"
  RELATED_TO_AT_INSTANCE_LEVEL = "RELATED_TO_AT_INSTANCE_LEVEL"
  RESISTANCE_ASSOCIATED_WITH = "RESISTANCE_ASSOCIATED_WITH"
  RESPONSE_AFFECTED_BY = "RESPONSE_AFFECTED_BY"
  RESPONSE_DECREASED_BY = "RESPONSE_DECREASED_BY"
  RESPONSE_INCREASED_BY = "RESPONSE_INCREASED_BY"
  SAME_AS = "SAME_AS"
  SENSITIVITY_ASSOCIATED_WITH = "SENSITIVITY_ASSOCIATED_WITH"
  SEQUENCE_LOCATION_OF = "SEQUENCE_LOCATION_OF"
  SIMILAR_TO = "SIMILAR_TO"
  STUDIED_TO_TREAT = "STUDIED_TO_TREAT"
  SUBCLASS_OF = "SUBCLASS_OF"
  SUBJECT_OF_TREATMENT_APPLICATION_OR_STUDY_FOR_TREATMENT_BY = "SUBJECT_OF_TREATMENT_APPLICATION_OR_STUDY_FOR_TREATMENT_BY"
  SUPERCLASS_OF = "SUPERCLASS_OF"
  TARGET_FOR = "TARGET_FOR"
  TAXON_OF = "TAXON_OF"
  TEMPORALLY_RELATED_TO = "TEMPORALLY_RELATED_TO"
  TESTED_BY_CLINICAL_TRIALS_OF = "TESTED_BY_CLINICAL_TRIALS_OF"
  TESTED_BY_PRECLINICAL_TRIALS_OF = "TESTED_BY_PRECLINICAL_TRIALS_OF"
  TRANSCRIBED_FROM = "TRANSCRIBED_FROM"
  TRANSCRIBED_TO = "TRANSCRIBED_TO"
  TRANSLATES_TO = "TRANSLATES_TO"
  TRANSLATION_OF = "TRANSLATION_OF"
  TREATED_BY = "TREATED_BY"
  TREATED_IN_STUDIES_BY = "TREATED_IN_STUDIES_BY"
  TREATMENT_APPLICATIONS_FROM = "TREATMENT_APPLICATIONS_FROM"
  TREATS = "TREATS"
  TREATS_OR_APPLIED_OR_STUDIED_TO_TREAT = "TREATS_OR_APPLIED_OR_STUDIED_TO_TREAT"
  VARIANT_PART_OF = "VARIANT_PART_OF"
  XENOLOGOUS_TO = "XENOLOGOUS_TO"

class _BiolinkQualifiers(str, Enum):
  ANATOMICAL_CONTEXT_QUALIFIER = "ANATOMICAL_CONTEXT_QUALIFIER"
  ASPECT_QUALIFIER = "ASPECT_QUALIFIER"
  CAUSAL_MECHANISM_QUALIFIER = "CAUSAL_MECHANISM_QUALIFIER"
  CONTEXT_QUALIFIER = "CONTEXT_QUALIFIER"
  DERIVATIVE_QUALIFIER = "DERIVATIVE_QUALIFIER"
  DIRECTION_QUALIFIER = "DIRECTION_QUALIFIER"
  DISEASE_CONTEXT_QUALIFIER = "DISEASE_CONTEXT_QUALIFIER"
  FORM_OR_VARIANT_QUALIFIER = "FORM_OR_VARIANT_QUALIFIER"
  FREQUENCY_QUALIFIER = "FREQUENCY_QUALIFIER"
  OBJECT_ASPECT_QUALIFIER = "OBJECT_ASPECT_QUALIFIER"
  OBJECT_CONTEXT_QUALIFIER = "OBJECT_CONTEXT_QUALIFIER"
  OBJECT_DERIVATIVE_QUALIFIER = "OBJECT_DERIVATIVE_QUALIFIER"
  OBJECT_DIRECTION_QUALIFIER = "OBJECT_DIRECTION_QUALIFIER"
  OBJECT_FORM_OR_VARIANT_QUALIFIER = "OBJECT_FORM_OR_VARIANT_QUALIFIER"
  OBJECT_PART_QUALIFIER = "OBJECT_PART_QUALIFIER"
  OBJECT_SPECIALIZATION_QUALIFIER = "OBJECT_SPECIALIZATION_QUALIFIER"
  ONSET_QUALIFIER = "ONSET_QUALIFIER"
  PART_QUALIFIER = "PART_QUALIFIER"
  POPULATION_CONTEXT_QUALIFIER = "POPULATION_CONTEXT_QUALIFIER"
  QUALIFIED_PREDICATE = "QUALIFIED_PREDICATE"
  QUALIFIER = "QUALIFIER"
  SEVERITY_QUALIFIER = "SEVERITY_QUALIFIER"
  SEX_QUALIFIER = "SEX_QUALIFIER"
  SPECIALIZATION_QUALIFIER = "SPECIALIZATION_QUALIFIER"
  SPECIES_CONTEXT_QUALIFIER = "SPECIES_CONTEXT_QUALIFIER"
  STAGE_QUALIFIER = "STAGE_QUALIFIER"
  STATEMENT_QUALIFIER = "STATEMENT_QUALIFIER"
  SUBJECT_ASPECT_QUALIFIER = "SUBJECT_ASPECT_QUALIFIER"
  SUBJECT_CONTEXT_QUALIFIER = "SUBJECT_CONTEXT_QUALIFIER"
  SUBJECT_DERIVATIVE_QUALIFIER = "SUBJECT_DERIVATIVE_QUALIFIER"
  SUBJECT_DIRECTION_QUALIFIER = "SUBJECT_DIRECTION_QUALIFIER"
  SUBJECT_FORM_OR_VARIANT_QUALIFIER = "SUBJECT_FORM_OR_VARIANT_QUALIFIER"
  SUBJECT_PART_QUALIFIER = "SUBJECT_PART_QUALIFIER"
  SUBJECT_SPECIALIZATION_QUALIFIER = "SUBJECT_SPECIALIZATION_QUALIFIER"
  TEMPORAL_CONTEXT_QUALIFIER = "TEMPORAL_CONTEXT_QUALIFIER"
  TEMPORAL_INTERVAL_QUALIFIER = "TEMPORAL_INTERVAL_QUALIFIER"

class _Qualifier(TableConfig):
  qualifier: _BiolinkQualifiers = Field(
    ...,
    description="a valid biolink qualfier",
    examples=["TEMPORAL_INTERVAL_QUALIFIER", "ANATOMICAL_CONTEXT_QUALIFIER", "POPULATION_CONTEXT_QUALIFIER"]
  )
  encoding: str = Field(
    ...,
    description="the value to give context to the biolink qualifier",
    examples=["24 Hours", "Alzheimers Disease", "Liver"]
  )

class _Statement(TableConfig):
  subject: _NodeSpec = Field(
    ...,
    description="the subject to qualify a statement - the thing doing something"
  )
  object: _NodeSpec = Field(
    ...,
    description="the object to qualify a statement - the thing getting something done to it"
  )
  predicate: _BiolinkPredicates = Field(
    ...,
    description="a valid biolink predicate to qualify a statement - the thing something does",
    examples=["ASSOCIATED_WITH", "CORRELATED_WITH", "AFFECTS"]
  )
  qualifiers: _NodeSpec[list[_Qualifier]] = Field(
    default=None,
    description="optional list of biolink qualifiers"
  )

class _ContributionKinds(str, Enum):
  CURATION = "CURATION"
  VALIDATION = "VALIDATION"
  TOOL = "TOOL"

class _Contributor(TableConfig):
  kind: _ContributionKinds = Field(
    default=_ContributionKinds.CURATION,
    description="the kind of contribution a contributor makes",
    examples=["CURATION", "VALIDATION", "TOOL"]
  )
  name: str = Field(
    ...,
    description="the name of the contributor",
    examples=["Skye", "Dr. Roach", "TableConfigMigrator2.0.0"]
  )
  organization: Optional[list[str]] = Field(
    default=None,
    description="optional list of organizations the contribtor is affilated with",
    examples=[
      ["Institute For Systems Biology", "CalPoly SLO"],
      ["University of Washington"],
      ["UNAM", "NCBI", "Pfizer"]
    ]
  )
  contributor_comment: Optional[str] = Field(
    default=None,
    description="anything a contributor feels the need to disclose here",
    examples=[
      "the migration script is in alpha and there may still be plenty of errors",
      "I recieved 100k in funding from the authors of this study"
    ]
  )

class _Sources(str, Enum):
  PUBMED = "PUBMED"
  PMC = "PMC"
  DOI = "DOI"

class _Provenance(TableConfig):
  source: _Sources = Field(
    default="PMC",
    description="one of the valid knowledge sources for tabular data",
    examples=["PUBMED", "PMC", "DOI"]
  )
  publication: Union[str, int] = Field(
    ...,
    description="a valid curie for the publication containing the data source without its prefix",
    json_schema_extra={"curie prefixes": ["doi:", "PMC:", "PMID:"]},
    examples=["PMC10349864", 39579765, "PMC11176916"]
  )
  contributors: list[_Contributor] = Field(
    ...,
    description="a list of people and tools that contributed to the creation of this config"
  )

class _MathFunctions(str, Enum):
  COPYSIGN = "COPYSIGN"
  POW = "POW"

class _MathModule(TableConfig):
  function: _MathFunctions = Field(
    ...,
    description="an approved python math module function to apply to values in a column",
    examples=["COPYSIGN", "POW"]
  )
  arguments: list[Union[Literal["[VALUES]"], float, int]] = Field(
    ...,
    description="a list of arguments to pass to the ",
    json_schema_extra={"what to use instead of values": "[VALUES]"},
    examples=[
      [-1, "[VALUES]"],
      ["[VALUES]", 10]
    ]
  )

class _ScalarAnnotation(_ValueEncoding):
  # TODO: ADD MORE DOCUMENTATION HERE
  transformations: Optional[list[_MathModule]] = Field(default=None)

class _KeyValueAnnotation(_ScalarAnnotation):
  annotation_name: str = Field(...)

class _Annotations(TableConfig):
  sample_size: Optional[_ScalarAnnotation] = Field(default=None)
  p_value: Optional[_ScalarAnnotation] = Field(default=None)
  multiple_testing_correction: Optional[_ScalarAnnotation] = Field(default=None)
  relationship_strength: Optional[_ScalarAnnotation] = Field(default=None)
  assertion_method: Optional[_ScalarAnnotation] = Field(default=None)
  notes: Optional[_ScalarAnnotation] = Field(default=None)
  kv: Optional[list[_KeyValueAnnotation]] = Field(default=None)

class _SectionStatuses(str, Enum):
  ALPHA = "ALPHA"
  BETA = "BETA"
  PRIMETIME = "PRIMETIME"

class _SingleSection(TableConfig):
  status: _SectionStatuses = Field(default=_SectionStatuses.ALPHA)
  source: Union[_ExcelSource, _TextSource] = Field(...)
  statement: _Statement = Field(...)
  provenance: _Provenance = Field(...)
  annotations: _Annotations = Field(...)

class _SectionAnnotated(_SingleSection):
  origin: Path = Field(...)
  section_number: PositiveInt = Field(...)

class Ok(TableConfig):
  sections: list[_SectionAnnotated] = Field(...)

class Error(BaseModel):
  code: int = Field(...)
  message: str = Field(...)
